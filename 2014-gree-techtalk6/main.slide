Lessons Learned While Writing "peco"
Tags: go, peco

Daisuke Maki
Engineer, LINE Corporation
lestrrat+nospam@gmail.com
https://github.com/lestrrat
@lestrrat

* This Slide

.link http://go-talks.appspot.com/github.com/lestrrat/go-slides/2014-gree-techtalk6/main.slide

* Who Is This Guy?

- @lestrrat
- LINE / Japan Perl Association / YAPC::Asia (2008~2013)
- STF / peco *(new!)*

.image foo.jpg

* Background

- Perl/C guy for last 16 yrs
- Picked up Go about a year ago

* Look Ma! I'm (now) more Gopher than you!

.image osrc.png

Go歴は短いけどがっつりGo書いてます！

* WTF Am I Doing Here

- なんかみんなInfluxDBとか大規模デプロイとか運用とかの重厚な話を聞きに来てません？

- 僕これからたかだか5000行弱のGoで書かれたCLIツールの話しますよ？
- 寝てもいいけどDISらないでね…

* peco?

- 今日は peco開発中にはまったり、考えたりした *軽いネタ* をさくっと話します
- " *Interactive* *Command* *Line* *Filtering* *Tool* "
- ナニソレ？

* Take A Look

.image peco-demo-multiple-queries.gif

* Demo?

TBD

* I LIKE STARS

.image star-beggar.png 500 _

* Lesson 0: Marketing is King

* No Go Here

- Goとは関係ないですね。
- でも重要
- なにせ pecoはpercol (https://github.com/mooz/percol)をパクったので…
- 後発はオリジナルより頑張らないと使われない（と思う）

* Good README + Animated gifs

.link https://github.com/peco/peco

- ほとんどの人は（最初は）説明なんて読まない。
- かくいう自分もpercolの説明を最初読んでない（インストールに失敗して諦めた）

* static link binary FTW

- Goなんだからバイナリ作成は簡単、用意するべき！
- git tag vX.Y.Z → git push → werckerでgoxcが動いてWin,Linux,Macバイナリを自動生成

* homebrew 

- homebrew対応、超簡単なのですぐするべき (brew tap)

    brew tap peco/peco
    brew install peco

- homebrew作成も自動化してある（本当はwercker部分もそうしたいんだけど、うまく動いてない）

    homebrew-peco
    go run make.go peco 1.2.3

* Lessons Learned:

- 簡単にしてあげると++
- 簡単にわかるようにしてよう！（README）
- 簡単に使えるようにしよう！(binaries, homebrew)

* Live Release

- Let's see if I can release 0.2.10, now

* Lesson 1: Synchronization Is Hard

* やっぱり同期は難しい

- わかってるつもりでしたり顔のブログ書いててもやっぱりはまる(*blush*)

.image shitarigao.png 500 _

* Mutexとかの話だと思った？

- いえ、もっと全然簡単な話です

- 複数のgoroutineをうまく同期させることを考えて… とかじゃなくて普通に小学生みたいなはまりかたをした実例です

* Status Message

- peco上に何が起きてるのかステータスを表示する
- 1: 文字をステータスバーに表示する
- 2: 文字をステータスバーから削除する（2パターン：1の後自動的に500ms後か、任意のタイミングで）

* Sample: Konami Command

.image peco-demo-konami.gif 350 _

* 何を思ったか別のチャンネルでそれぞれを受け取る設定にした

- 俺：「別々のリクエストだからばらしたほうが効率よくね？！」
- 同じgoroutineから

    // pseudocode
    statusCh <- request{ message: "Hello, World!" }
    clearCh <- request{ after: 500 * time.Millsecond}

* あれ、これって描画と削除がばらばらになるだけじゃ…

- Yes, this is *silly*. Please kill me.

.image silly_race_condition.png 500 _

* 当たり前だけどこうだよね

- *全部同じchanでよかったんや！*

.image sequential.png 500 _

* Lessons Learned:

- 難しい事するから同期が難しいだけではなく  *簡単な事でも油断しているとすぐレースコンディションを生んでしまう* （俺だけじゃないよね？）のが並行処理の難しいところ
- 気軽にできるからってなんでもかんでも非同期化すると悲しいバグを踏む
- 基本的に並行作業の同期は人類には難しすぎるつもりでコードを書くとよい
- と自分に言い聞かせながらコードを書いていてもやっちまうので余計に用心しましょう

* Lesson 2: Testing Is Hard

* You HAVE Tests, Right?

- テスト重要ですよね！

* でもpecoはおもちゃから始まったので…

.image mokushi.gif

* 「ヤバい」と思いつつ2ヶ月

- （どれか忘れた）なにかキーシーケンスまわりでregression
- やばい、今書かないとやばい！

* CUI まわりのテスト面倒！

- 画面操作は基本グローバルな関数を扱う
- モックっぽいのの差し込みするのどうするんだ…

* First, observe...

.image termbox.png 500 _

* Interfaces to the Rescue!

- Create "Screen" interface

.code peco_screen.go /START SCREEN OMIT/,/END SCREEN OMIT/ 

* Implement Screen

- "Termbox" satisfies the Screen interface

.code peco_screen.go /START TERMBOX OMIT/,/END TERMBOX OMIT/

* Sneak In A Global!

   var screen Screen = Termbox{}

- Then, s/termbox/screen/g (well, not quite)

* Mocking In Test

   type dummyScreen struct { ... }
   screen = dummyScreen{}

- あ、でもこれ効果がグローバルだ！

* Implement Scope::Guard (sort of)

.code peco_layout_test.go /START SETDUMMYSCREEN OMIT/,/END SETDUMMYSCREEN OMIT/
.code peco_layout_test.go /START USE DUMMYSCREEN OMIT/,/END USE DUMMYSCREEN OMIT/

- もちろん、場合に酔ってはテストの並列実行で壊れるので注意

* Lesson Learned:

- Mockっぽいものはinterfaceで！
- 変更の局所化はGuardで！

* One More Thing

- 今回のケースはグローバル関数だったのでこう書いた
- 多分最初からMockとか考えてinterfaceガンガン作って抽象化するの多分over engineering
- テストを書く段階でinterfaceとか考えて差し込めるし、そのほうがGoのget things done的な精神にあってるのでは？
- Goはわりと「後からどうにでもできる言語」だと思う

* Oops

   shoebill% go test -coverprofile=c.out
   PASS
   coverage: 33.2% of statements
   ok  	github.com/peco/peco	0.419s
   shoebill% 

- ははは… 次行こう。

* Lesson 3: Working With Libraries

* Perl時代の私

- 「コア機能以外は全部外部の *汎用ライブラリ* に追い出さないと死ぬ！」
- 「全部cpanfileにキレイに書いて、どこの環境でもうまいこと動くようにしないと死ぬ！」

* Go時代の私

- Go Is Not Perl/Ruby/Python/Node/etc
- 「どうせコンパイル通すからそんなにライブラリライブラリ言わないでも大丈夫だよ…」

* 例：キーシーケンスの処理

- Key sequence 処理はFSM的なものを使って登録されたシーケンスと入力シーケンスをマッチさせる必要があった
- @lestrrat on twitter:「あー、なんかFSM必要なきがしてきたなー」

* Twitterでつぶやいたらすぐ

.image aruyo.jpg

.caption http://kameshika.cocolog-nifty.com/photos/uncategorized/2010/10/25/hero.jpg

* 提供されたライブラリ

.image koron-my-savior.png 400 _

- stringをキーとして、Aho-Corasick法を使ってパターン認識する

* あんまり汎用じゃなかった

- stringキーしか受け付けないのか…！
- こっちのキーは[]termbox.Key{}だ…

* No problem: I'm shipping a binary

- 前提：pecoは単体のツールであり、ライブラリではない
- どうもPerl/Python/Ruby等をやっていると、汎用ライブラリが欲しくなる
- pecoはどうせコンパイルする。 *汎用ライブラリはあればいいけど、別に必要はない*

* パクってpeco専用にしてしまおう！

* 伝家の宝刀：CUT AND PASTE

.image cutnpaste.png 500 _

* PR送らないの？！

- もちろんコードの再利用は良いことですよ！
- でも *reflection使ったりinterface{}でがんばるコードはGo的にどうなのか* とは思う
- バイナリを作ってるので、ライブラリだけのアップグレードとかありえないし…
- なので元のライブラリにPRを送る必要性は感じなかった

* ちなみに: go generate

- go 1.4以降でソースコードジェネレーターが追加されるかも？
- ライブラリはテンプレートを提供して、必要な型分のコードを生成する
- 今回のライブラリのパクリ／カスタマイズとやってることは一緒になる

* On A Related Note: Godep

- 依存関係の管理ツール
- Godep: -copy=false が廃止された
- 「プロジェクトごとに依存関係のSHA1だけでなく、本体のコピーを持っていろ」

* Nice Gesture Here..

.image switch-godep.png 500 _

* But It Adds _8000_ Lines...

.image kotowaru.gif

.caption https://github.com/peco/peco/pull/195

- や、まぁそういう大きさのプロジェクトなら、ありかも…
- pecoはまだ5000行。ここに8000行の依存とか追加するのは、いやだったので

* Go As A Scripting Language FTW

- 解決しないといけない依存関係についてはpecoは自前でビルドプログラム書いた

.link https://github.com/peco/peco/blob/master/build/make.go

   go run make.go deps  // Setup deps
   go run make.go build // Build binaries via goxc

* Lessons Learned:

- キレイに依存関係を解決するのも良いが、ツールを配布する場合はコピーしてカスタマイズしたものを埋め込むという手も現実的
- 将来的にはコードジェネレータが推奨されるかも？

* Lesson 4: Cross-compilation is hard

* Goってクロスコンパイルできるんでしょ？

- 俺：「う、うん…」

.image maittana.jpg

.caption http://samitadeare.blog70.fc2.com/blog-entry-889.html

* cgoを使わなければね！

- 外部ライブラリと結合する必要のある場合は当然システム依存
- When it does, *IT* *WILL* *SILENTLY* *FAIL*

* じゃあGoの同梱ライブラリだけを使ってれば大丈夫だよね？

- 俺：「う、うん…」

.image maittana.jpg

.caption http://samitadeare.blog70.fc2.com/blog-entry-889.html

* os/user はcgo使ってるよ！

- err != nil 確認してるのにッ！返ってきた構造体の内容が空なんて…！

.image cgo-silent-fail.png 500 _

* Lessons Learned:

- えー… Goも完璧じゃないです
- この手の問題はマジではまるので、素直に回りの人やTwitterで聞きましょう

* go-homedir

- Yes, we know
- Just did not like the implementation like this:

.link https://github.com/mitchellh/go-homedir/blob/7d2d8c8a4e078ce3c58736ab521a40b37a504c52/homedir.go#L57

- それにとりあえず動いているコードをわざわざ変えるメリットが見られなかった


* Questions?

